{{- /*gotype: tftemplate/models.ResourceTemplate*/ -}}
package {{.API}}_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
	"github.com/scaleway/scaleway-sdk-go/scw"
)



func TestAcc{{.Resource}}_Basic(t *testing.T) {
	tt := acctest.NewTestTools(t)
	defer tt.Cleanup()

	resource.ParallelTest(t, resource.TestCase{
		PreCheck:          func() { acctest.PreCheck(t) },
		ProviderFactories: tt.ProviderFactories,
		CheckDestroy:      testAccCheck{{.Resource}}Destroy(tt),
		Steps: []resource.TestStep{
			{
				Config: `
					resource "scaleway_{{.API}}_{{.ResourceHCL}}" "main" {
						name = "test-{{.API}}-{{ .ResourceCleanLow}}-basic"
					}
				`,
				Check: resource.ComposeTestCheckFunc(
					testAccCheck{{.Resource}}Exists(tt, "scaleway_{{.API}}_{{.ResourceHCL}}.main"),
					resource.TestCheckResourceAttr("scaleway_{{.API}}_{{.ResourceHCL}}.main", "name", "test-{{.API}}-{{ .ResourceCleanLow}}-basic"),
				),
			},
		},
	})
}

func testAccCheck{{.Resource}}Exists(tt *acctest.TestTools, n string) resource.TestCheckFunc {
	return func(state *terraform.State) error {
		rs, ok := state.RootModule().Resources[n]
		if !ok {
			return fmt.Errorf("resource not found: %s", n)
		}

		api, {{.Locality}}, id, err := newAPIWith{{.LocalityUpper}}AndID(tt.Meta, rs.Primary.ID)
		if err != nil {
			return err
		}

		_, err = api.Get{{.ResourceClean}}(&{{.API}}.Get{{.ResourceClean}}Request{
			{{.ResourceClean}}ID: id,
			{{.LocalityUpper}}:      {{.Locality}},
		})

		if err != nil {
			return err
		}

		return nil
	}
}

func testAccCheck{{.Resource}}Destroy(tt *acctest.TestTools) resource.TestCheckFunc {
	return func(state *terraform.State) error {
		for _, rs := range state.RootModule().Resources {
			if rs.Type != "scaleway_{{.API}}_{{.ResourceHCL}}" {
				continue
			}

			api, {{.Locality}}, id, err := newAPIWith{{.LocalityUpper}}AndID(tt.Meta, rs.Primary.ID)
			if err != nil {
				return err
			}

			_, err = api.Delete{{.ResourceClean}}(&{{.API}}.Delete{{.ResourceClean}}Request{
				{{.ResourceClean}}ID: id,
				{{.LocalityUpper}}:      {{.Locality}},
			})

			if err == nil {
				return fmt.Errorf("{{.API}} {{.ResourceCleanLow}} (%s) still exists", rs.Primary.ID)
			}

			if !httperrors.Is404(err) {
				return err
			}
		}

		return nil
	}
}