{{- /*gotype: tftemplate/models.ResourceTemplate*/ -}}
package {{.API}}

import (
    "context"

    "github.com/hashicorp/terraform-plugin-sdk/v2/diag"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
    "github.com/scaleway/terraform-provider-scaleway/v2/internal/datasource"
    "github.com/scaleway/terraform-provider-scaleway/v2/internal/verify"
)

func DataSource{{.Resource}}() *schema.Resource {
    // Generate datasource schema from resource
    dsSchema := datasource.SchemaFromResourceSchema(Resource{{.Resource}}().Schema)
    
    datasource.AddOptionalFieldsToSchema(dsSchema, "name", "{{.Locality}}")
    
    dsSchema["{{.ResourceCleanLow}}_id"] = &schema.Schema{
        Type:          schema.TypeString,
        Optional:      true,
        Description:   "The ID of the {{.ResourceCleanLow}}",
        ConflictsWith: []string{"name"},
        ValidateFunc:  verify.IsUUIDorUUIDWithLocality(),
    }
    dsSchema["project_id"].Optional = true
    
    return &schema.Resource{
        ReadContext: DataSource{{.Resource}}Read,
        Schema:      dsSchema,
    }
}

func DataSource{{.Resource}}Read(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
    api, {{.Locality}}, err := newAPIWith{{.LocalityUpper}}(d, m)
    if err != nil {
        return diag.FromErr(err)
    }

    {{.ResourceCleanLow}}ID, {{.ResourceCleanLow}}IDExists := d.GetOk("{{.ResourceCleanLow}}_id")
    if !{{.ResourceCleanLow}}IDExists {
        {{.ResourceCleanLow}}Name := d.Get("name").(string)
        res, err := api.List{{.ResourceClean}}s(&{{.API}}.List{{.ResourceClean}}sRequest{
            {{.LocalityUpper}}:     {{.Locality}},
            Name:       types.ExpandStringPtr(d.Get("name")),
        })
        if err != nil {
            return diag.FromErr(err)
        }
        found{{.ResourceClean}} , err := datasource.FindExact(
            res.{{.ResourceClean}}s,
            func(s *{{.API}}.{{.ResourceClean}}) bool {return s.Name == {{.ResourceCleanLow}}Name },
            {{.ResourceCleanLow}}Name,
        )
        if err != nil {
            return diag.FromErr(err)
        }
        {{.ResourceCleanLow}}ID = found{{.ResourceClean}}.ID
    }

    {{- if eq .Locality "zone" }}
    {{.Locality}}ID := datasource.NewZonedID({{.ResourceCleanLow}}ID, {{.Locality}})
    {{- else }}
    {{.Locality}}ID := datasource.New{{.LocalityAdjectiveUpper}}ID({{.ResourceCleanLow}}ID, {{.Locality}})
    {{- end}}
    d.SetId({{.Locality}}ID)
    err = d.Set("{{.ResourceCleanLow}}_id", {{.Locality}}ID)
    if err != nil {
        return diag.FromErr(err)
    }

    return Resource{{.Resource}}Read(ctx, d, m)
}
